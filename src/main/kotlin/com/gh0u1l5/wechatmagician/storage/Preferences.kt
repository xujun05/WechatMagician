package com.gh0u1l5.wechatmagician.storage

import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.content.IntentFilter
import android.os.Environment
import com.gh0u1l5.wechatmagician.Global.ACTION_UPDATE_PREF
import com.gh0u1l5.wechatmagician.Global.FOLDER_SHARED_PREFS
import com.gh0u1l5.wechatmagician.Global.MAGICIAN_PACKAGE_NAME
import com.gh0u1l5.wechatmagician.Global.PREFERENCE_STRING_LIST_KEYS
import com.gh0u1l5.wechatmagician.Global.WECHAT_PACKAGE_NAME
import com.gh0u1l5.wechatmagician.util.FileUtil
import com.gh0u1l5.wechatmagician.util.FileUtil.getApplicationDataDir
import de.robv.android.xposed.XSharedPreferences
import de.robv.android.xposed.XposedBridge.log
import java.io.File
import java.io.FileNotFoundException
import java.util.concurrent.locks.ReentrantReadWriteLock
import kotlin.concurrent.read
import kotlin.concurrent.write

class Preferences {

    // listCache caches the string lists in memory to speed up getStringList()
    private val listCacheLock = ReentrantReadWriteLock()
    private val listCache = mutableMapOf<String, List<String>>()

    // content is the preferences generated by the frond end of Wechat Magician.
    private var content: XSharedPreferences? = null
    // legacy is the legacy preferences generated by Wechat Magician of version <= 2.5.2
    @Volatile private var legacy: HashMap<String, Any?>? = null

    // receiver is a broadcast receiver that updates the content after changes.
    private val receiver = object : BroadcastReceiver() {
        override fun onReceive(context: Context?, intent: Intent?) {
            // Reload and cache the shared preferences
            content?.reload()
            cacheStringList()

            // The latest preferences has been moved to the data directory.
            // It is safe to remove the legacy preferences on the external storage.
            legacy = null
            val storage = Environment.getExternalStorageDirectory()
            val legacyPrefDir = File(storage, "WechatMagician/.prefs")
            legacyPrefDir.deleteRecursively()
        }
    }

    // load registers the receiver and loads the specific shared preferences.
    @Suppress("UNCHECKED_CAST")
    fun load(context: Context?, preferencesName: String) {
        try {
            // First, check the legacy preferences on external storage
            // If legacy preferences exists, load the legacy content.
            val storage = Environment.getExternalStorageDirectory()
            val legacyPrefDir = File(storage, "WechatMagician/.prefs")
            val legacyPrefFile = File(legacyPrefDir, preferencesName)
            if (legacyPrefFile.exists()) {
                val path = legacyPrefFile.absolutePath
                legacy = FileUtil.readObjectFromDisk(path) as HashMap<String, Any?>
            }

            // Also load the preferences in the data directories.
            val wechatDataDir = getApplicationDataDir(context)
            val magicianDataDir = wechatDataDir.replace(WECHAT_PACKAGE_NAME, MAGICIAN_PACKAGE_NAME)
            val preferencePath = "$magicianDataDir/$FOLDER_SHARED_PREFS/$preferencesName.xml"
            content = XSharedPreferences(File(preferencePath))
            context?.registerReceiver(receiver, IntentFilter(ACTION_UPDATE_PREF))
        } catch (_: FileNotFoundException) {
            // Ignore this one
        } catch (e: Throwable) {
            log("PREF => $e")
        }
    }

    fun cacheStringList() {
        PREFERENCE_STRING_LIST_KEYS.forEach { key ->
            val list = getString(key, "").split(" ")
            listCacheLock.write {
                listCache[key] = list
            }
        }
    }

    fun getBoolean(key: String, defValue: Boolean): Boolean {
        if (legacy != null) {
            return legacy?.get(key) as? Boolean ?: defValue
        }
        return content?.getBoolean(key, defValue) ?: defValue
    }

    fun getString(key: String, defValue: String = ""): String {
        if (legacy != null) {
            return legacy?.get(key) as? String ?: defValue
        }
        return content?.getString(key, defValue) ?: defValue
    }

    fun getStringList(key: String, defValue: List<String> = listOf()): List<String> {
        listCacheLock.read {
            return listCache[key] ?: defValue
        }
    }
}
